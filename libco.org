* Intrduction
  Libco provides a way to run and switch multi-routines in userspace in one thread. With provided api, these routines can work as threads created by pthread. For example conditional wait, socket send/recv..

* libco split
** key code
    #+BEGIN_SRC C
	coctx_swap(&(curr->ctx),&(pending_co->ctx) ); //switch between routes in current thread.
    #+END_SRC
** co_routine.h, co_routine.cpp
   This is the key file in this lib. It provides similar functions as pthread.
*** co_create
    Create routine ctx prepare for running.
*** co_resume
    Add routine ctx into stack, waiting to be switched.
*** co_yield
    Release current runing routine, let next waiting routing to run.
*** co_yield_ct
    Release current thread related ctx.
*** co_release
    Free finished routine related context.
*** co_self
    Current routine.
*** TODO co_poll
    Poll fds; add example
*** co_eventloop
    Key routine to switch between routines.
*** co_setspecific
*** co_getspecific
*** co_get_epoll_ct

*** co_enable_hook_sys
*** co_disable_hook_sys
*** co_is_enable_sys_hook

*** co_cond_alloc
*** co_cond_free
*** co_cond_signal
*** co_cond_broadcast
*** co_cond_timedwait

*** co_alloc_sharestack
*** co_set_env_list
*** co_log_err
** co_closure.h
   It is a file seems not related with other files. The basic technology of this file is to create class has members = paramters in co_func, has parent class stCoClosure_t; then these objects can be put into vector and be called one by one.
   If we expand(g++ -E ) the example_closure.cpp, we will find:
*** co_ref( ref,total,v2,m);
    #+BEGIN_SRC C
    typedef typeof( total ) typeof_total;
    typedef typeof( v2 ) typeof_v2;
    typedef typeof( m ) typeof_m;
    class type_ref{
        public: typeof_total & total;
        typeof_v2 & v2;
        typeof_m & m;
        int _member_cnt;
        type_ref( typeof_total & totalr, typeof_v2 & v2r, typeof_m & mr, ... )
            : total(totalr), v2(v2r), m(mr), _member_cnt(3)
        {}
    } ref( total,v2,m ) ;;
    #+END_SRC

*** co_func( f,ref,i ){...} co_func_end;
    #+BEGIN_SRC C
    typedef typeof( ref ) typeof_ref;
    typedef typeof( i ) typeof_i;
    class f:public stCoClosure_t
    {
    public:
        typeof_ref ref;
        typeof_i i;
        int _member_cnt;
    public:
        f( typeof_ref & refr, typeof_i & ir, ... ): ref(refr), i(ir), _member_cnt(2)
        {}
        void exec()
        {
        ...
        }
    };
    #+END_SRC
** example_cond.cpp
   Provide example of co_ond_alloc, co_cond_signal, co_cond_timedwait usage.
** example_copystack.cpp
   Two routines share same stack.
** example_echocli.cpp, example_echosvr.cpp
   Provide good examples of using co_routines for socket application.
